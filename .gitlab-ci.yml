stages:
  - lint
  - test
  - publish
  - deploy

default:
  image: python:3.8
  tags:
    - docker_dio

.setup:
  before_script:
    - python --version
    - pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true --local

lint-job:
  stage: lint
  needs: []
  before_script:
    - !reference [.setup, before_script]
    # install pre-commit
    - poetry run pip install pre-commit
  script:
    # run pre-commit
    - poetry run pre-commit run -a
  only:
    - develop
    - master
    - tags
    - merge_requests
    - web

test-job:
  stage: test
  needs: []
  variables:
    CDF_URL: 'https://spdf.gsfc.nasa.gov/pub/software/cdf/dist/cdf38_1/cdf38_1-dist-all.tar.gz'
  before_script:
    - !reference [.setup, before_script]
    # install cdf and spacepy.pycdf
    - apt-get update
    - apt-get install -y gfortran ncurses-dev
    - wget $CDF_URL
    - tar -xf cdf38_1-dist-all.tar.gz && cd ./cdf38_1-dist
    - make OS=linux ENV=gnu CURSES=yes FORTRAN=no UCOPTIONS=-O2 SHARED=yes all
    - make install
    # install maser data
    - cd .. && poetry install -E spacepy
  script:
    # source the CDF lib and run the test
    - . ./cdf38_1-dist/bin/definitions.B
    - poetry run pytest --cov=maser.data --junitxml=report.xml -m "not test_data_required"
    - poetry run coverage xml
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml
  only:
    - develop
    - master
    - tags
    - merge_requests
    - web

# publish python package on gitlab registry
publish-job:
  stage: publish
  tags:
    - docker_dio
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install poetry
  script:
    # publish on a dedicated and centralized repository
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry build
    - poetry publish -r gitlab -u gitlab-ci-token -p $CI_JOB_TOKEN
  only:
    - tags
    - web

# deploy doc pages
pages:
  stage: publish
  tags:
    - docker_dio
  script:
    - pip install -r docs/requirements.txt
    - sphinx-build -b html docs/source public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
